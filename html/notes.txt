2 types of HTML elements:
- Non-replaced: usually have closing tags and dictate how the content between the tags should be marked up
- Replaced and void: usually without a closing tag, the element becomes something else (e.g. image, form UI element,
  etc.)

The function of HTML elements is to describe what the content is - not to style it.

Essentials for every HTML page:
- Type of document
- Human language
- Character set
- Title

Always add <!DOCTYPE html> as a first line - tells the browser to use standards mode (not quirks mode)
Skeleton:
<!DOCTYPE html>
<html lang="en-US">
    <head>
    </head>
    <body>
    </body>
</html>

The head section contains all the metadata for a site. ALWAYS include:
- character set
- title
- viewport settings

Always use UTF-8 encoding (it's the standard required for HTML5)
<meta charset="utf-8" />
- the '/' at the end of the tag is a classic way of indicating that the tag is has no closing tag

Should always use the viewport meta tag.
<meta name="viewport" content="width=device-width" />

Metadata that should be included outside the <meta> tags:
- CSS
    - <link> with 'rel' attribute set to 'stylesheet' (preferred)
    - include the CSS directly within the head within opening and closing <style> tags
    <link rel="stylesheet" href="styles.css">
    - 'type="text/css"' is unnecessary! (unless using something other than css)
    - custom properties can be declared in the <head> <style> block:
    <style>
        :root {
            --theme-color: #226DAA;
        }
    </style>

While styles can go in the body, they're better in the head for performance.

- Favicon
    - the little icon appearing in the browser tab
    - when not declared, browser tries to find 'favicon.ico' in the top-level directory
    - <link> allows you to use a different file name and location:
<link rel="icon" sizes="16x16 32x32 48x48" type="image/png" href="/images/mlwicon.png" />
    - which means use icon specified in scenarios where 16/32/48px makes sense
    - size can be 'any' for scalable icons or a space-separated list of widthXheight values (must be multiples of 16, x
    or X)
    - extras for apple:
<link rel="apple-touch-icon" sizes="180x180" href="/images/mlwicon.png" />
<link rel="mask-icon" href="/images/mlwicon.svg" color="#226DAA" />
    - apple-touch-icon is for iOS devices when a site is added to the home screen
    - you can specify multiple icons with different sizes for different devices
    - mask-icon is used for pinned tabs on macOS Safari - icon should be monochrome SVG colored using 'color' attribute
    - be consistent in icon usage across a website

- Alternate versions
    - used to identify translations or alternate representations of the site
<link rel="alternate" href="https://www.machinelearningworkshop.com/fr/" hreflang="fr-FR" />
<link rel="alternate" href="https://www.machinelearningworkshop.com/pt/" hreflang="pt-BR" />
    - when using 'alternate' for a translation, the 'hreflang' attribute must be set
    - can also define alternate URI for an RSS feed when 'type' is set to 'application/rss+xml' or
    'application/atom+xml'.
<link rel="alternate" type="application/x-pdf" href="https://machinelearningworkshop.com/mlw.pdf" />

- Canonical versions
    - used to identify the authoritative version of a site if there are multiple translations or versions
    - use 'rel="canonical"'
    - include the canonical URL on all translated pages and on the home page
<link rel="canonical" href="https://www.machinelearning.com" />

- Scripts
    - the default is JavaScript, use 'type' attribute if anything else, or 'type="module"' for a JS module
    - the <script> tag can be used to encapsulate code or download external file
    - ensure elements exist before the script referencing them is encountered! for this reason, it may make sense to
    include <script> at the bottom of the <body> rather than in the <head>
    - JS is render-blocking, meaning if it can't be run, the rest of the website won't load
    - reduce the blocking nature of JS download and execution using the attributes 'defer' and 'async'
    - 'defer' means rendering not blocked during download and JS executed after rest of document rendered
    - 'async' is the same, except rendering is paused while JS executes
    - example: <script src="js/switch.js" defer></script>
    - 'async' and 'defer' only valid on external scripts

- Base
    - <base> allows setting default URL and target, with 'href' attribute defining base URL for all relative links
    - 'target' attribute sets where the links should open
        - default '_self' opens files in same context as current document
        - '_blank' opens every link in a new window
        - '_parent' of current content (maybe same as self if opener not an iframe)
        - '_top' opens in same browser tab, but popped out of current context to take entire tab
    - usually devs add 'target' attribute to the few links they want to open in a new window on the links themselves
    - drawback: anchor links are resolved with <base>
        - <a href="#ref"> effectively converted to <a target="_top" href="https://machinelearningworkshop.com#ref">
    - can only be one <base> element in a document
    - should come before any relative URLs are used, including script and stylesheet references

HTML comments is anything between <!-- and -->
Use JS or CSS comments in script or style blocks, as necessary

Meta tags
2 main types: pragma directives and named meta types
- both must include 'content' attribute defining content for the type of metadata listed

Pragma directives
- most common is the 'refresh' directive
<meta http-equiv="refresh" content="60; https://machinelearningworkshop.com/regTimeout" />
- refreshes every 60 seconds but DON'T use it! because why would you???? terrible for users and especially accessibility
- good practice is to make sure user has enough time to read page, a link to hasten the process, and maybe can cancel

- most useful pragma directive: 'content-security-policy'
- content policies specify allowed server origins and script endpoints, helping against cross-site scripting attacks
<meta http-equiv="content-security-policy" content="default-src https:" />

Named meta tags
- include 'name' attribute for name of metadata
- also requires 'content' attribute
- probably want to include 'description' and 'theme-color' but not 'keywords'

- 'description' value is super important for SEO, often what's displayed under page title in search results, often
  default description of bookmarked pages

- you can tell search engines not to index your site using the 'robots' named meta tag:
<meta name="robots" content="noindex, nofollow" />
- should work, but no law requires bots to listen
- don't need anything to specifically allow indexing

- 'theme-color' defines a color to customize the browser interface
- especially useful for progressive web apps
    - can be included in the required manifest file of PWAs instead, but defining in HTML might be faster
- example: (sets theme color to blue)
<meta name="theme-color" content="#226DAA" />
- can include 'media' attribute enabling setting of different theme colors based on media queries
- this is the only meta tag where you might have more than one of the same (for different media queries)

- if including multiple named metas for legacy browsers, legacy should come after newer values

Open Graph: allows you to control how social media sites display links to your content
- can customize an image and site title and description for social media sites
- Open Graph meta tags have two attributes each:
    - 'property' attribute' instead of 'name' and the 'content' for that property
- example:
<meta property="og:title" content="Machine Learning Workshop" />
<meta property="og:description" content="School for Machines Who Can't Learn Good and Want to Do Other Stuff Good Too" />
<meta property="og:image" content="http://www.machinelearningworkshop.com/image/all.png" />
<meta property="og:image:alt" content="Black and white line drawing of refrigerator, french door refrigerator, range, washer, fan, microwave, vaccuum, space heater and air conditioner" />
- the image URL needs to be an absolute URL
- can provide a canonical URL with 'og:url'
- different sites might have their own similar syntax: (not necessarily following Open Graph protocol)
- example for Twitter:
<meta name="twitter:title" content="Machine Learning Workshop" />
<meta name="twitter:description" content="School for machines who can't learn good and want to do other stuff good too" />
<meta name="twitter:url" content="https://www.machinelearningworkshop.com/?src=twitter" />
<meta name="twitter:image:src" content="http://www.machinelearningworkshop.com/image/all.png" />
<meta name="twitter:image:alt" content="27 different home appliances" />
<meta name="twitter:creator" content="@estellevw" />
<meta name="twitter:site" content="@perfmattersconf" />
- can provide different values for 'og:image', 'og:title', and 'og:description' based on the parameter of the URL

Customize application icons if site is added as a bookmark, added to a home screen, etc.:
<link rel="apple-touch-startup-image" href="icons/ios-portrait.png" media="orientation: portrait" />
<link rel="apple-touch-startup-image" href="icons/ios-landscape.png" media="orientation: landscape" />

You can use meta tags to tell the browser that a site is web-app capable (can stand on its own without UI like a back
button)
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="mobile-web-app-capable" content="yes" />

You can customize the name of your site's app icon if it's saved to a home screen:
<meta name="apple-mobile-web-app-title" content="MLW" />
<meta name="application-name" content="MLW" />
- these two tags could be replaced by 'short_name: MLW' in a webmanifest file
- a manifest file can prevent an unwieldy header full of <link> and <meta> tags
- manifest files are usually called 'manifest.webmanifest' or 'manifest.json'
- then use '<link>' tag:
<link rel="manifest" href="/mlw.webmanifest" />

Semantic HTML
There's a big difference between using only <div> and <span> versus descriptive <header>, <footer>, <main>, and <nav>
tags. The latter is significantly better for accessibility.
You can also use the 'role' attribute to make non-semantic tags semantic, with roles like 'banner', 'heading', and
'navigation'. However, the implicit role (e.g. in tags like <header>) is preferable.
Role is better than using multiple 'id' or 'class' attributes for <div> tags.
The goal is building a meaningful accessibility object model (AOM) for screen readers and other assistive technology to
use.

Ultimately, using semantic HTML results in writing less code.

Good semantic HTML tags:
- <header>
- <footer>
- <nav>
- <main>: only 1 per page
- <aside>: content related to main content, often a sidebar or call-out box, implicit 'role' is 'complementary'
- <article>: posts/sections nested in main - self-contained and independently reusable content
- <section>
- <address>: contact info for individuals or organizations
- <h1>-<h6>: headings, nest headings without skipping levels, they appear smaller in nested sections

HTML attributes
- attribute values only NEED to be in quotes if they contain spaces or special characters
- best practice to always use quotes though!
- case sensitivity is pretty loose, but anything that you define is case-sensitive

- if a boolean attribute is present, it's true
- boolean values can be set to anything (including false) and will resolve as true
    - but not all attributes are boolean attributes
- when toggling a value true/false in JS, add and remove attribute rather than toggling value

- enumerated attributes have default values, which depend on the attribute
- enumerated attributes can be set to false
- invalid or missing values for enumerated attributes cause the default value to be used
- or if an enumerated attribute is missing, the default value is used

- global attributes can be set on any html element, although some have no effect on certain elements

- the 'id' attribute defines a unique identifier for an element
- 'id' values can be anything without a space, but normal variable conventions are good practice
- 'id's should be unique to the document

- fragment identifiers ('href="#reg"') cause scrolling to the section identified by 'id="reg"'
- 'href="#top"' or 'href="#"' scroll to the top of the page
- the fragment identifier is not sent to the server

- css selectors: target a section using an id selector like '#feedback'
- or, for less specificity, a case-sensitive attribute selector, like '[id="feedback"]'

- JS for targeting an element with 'id="switch"': (2 options)
const switchViaID = document.getElementById("switch");
const switchViaSelector = document.querySelector("#switch");
    - or 'querySelectorAll()'

- <label> element has a 'for' attribute that takes as its value the 'id' of the form control with which it is associated
- each label can be associated with exactly one form control (and should)
- a form control may have more than one associated label
- if form control nested between <label> opening and closing tags, 'for' and 'id' attributes aren't required
    - this is an 'implicit' label
- when including radio buttons, as the labels describe the value of the radio buttons, we encompass all the same-named
  buttons in a <fieldset> with the <legend> being the label for the entire set
- Example:
<fieldset>
  <legend>Question 5: Who is an aspiring load balancer?</legend>
  <ul>
    <li>
      <input type="radio" name="q5" value="blendan" id="q5blendan">
      <label for="q5blendan">Blendan Smooth</label>
    </li>
    <li>
      <input type="radio" name="q5" value="hoover" id="q5hoover">
      <label for="q5hoover">Hoover Sukhdeep</label>
    </li>
  </ul>
</fieldset>

- 'id' can also be used for accessibility
- a <section> tag that contains a <h2> tag could have an 'aria-labelledby' attribute whose value matches the 'id' of the
  <h2> tag
    - then the accessible name for that section will be the contents of the <h2> tag
- 'aria-*' states and properties that take as their value a space-separated 'id' reference list:
    - 'aria-labelledby'
        - has precedence over <label>, <label> text not heard unless 'aria-labelledby' attribute includes id of label
    - 'aria-describedby'
    - 'aria-details'
    - 'aria-owns'
    - 'aria-activedescendant'
        - identifies currently focused descendant element
        - only takes a single 'id' reference
            - of the single element that has focus (only one at a time)

Classes
- classes only matter for targeting with CSS and JS (don't affect HTML)
- class attribute takes a space-separated list of case-sensitive classes as its value
- semantic HTML often makes class names redundant
- targeting by class name ('document.getElementsByClassName()') versus targeting by attributes/page structure
  ('document.querySelectorAll()') difference:
    - former returns live node list
    - latter returns static node list
    - difference is live list recognizes new changes in DOM

'style'
- the 'style' attribute is better used to test things quickly
- best practice is to use external style sheet(s)

Focus
- keyboard users can hit tab to cycle between elements
- some elements are not capable of receiving focus by default
- whether an element can receive focus and the order of elements can be modified using the 'tabindex' attribute
- 'tabindex' takes as its value an integer (in quotes, by convention)
    - a negative integer (convention: -1) makes an element capable of receiving focus
        - but doesn't add it to tabbing sequence
    - a value of "0" makes the element focusable and reachable via tabbing
        - adds it to default tab order (in source code order)
    - a value of 1 or more puts element in a prioritized focus sequence
        - not recommended
        - if a document includes elements with a 'tabindex' of 1 or more, they're included in a separate tab sequence
        - bad tabbing sequences SUCK! avoid them! terrible for usability and maintenance

Role
- the 'role' attribute is used to provide semantic meaning to content
- some UI widgets (like tablists, e.g. the way browser tabs work) have no native HTML equivalent
    - 'role' can be used to add semantic meaning with values of 'tab', 'tablist', and 'tabpanel'
    - ex: <button role="tab">, which lets the screen reader know the function is different than a regular button
- 'role' doesn't change browser behavior (which is why semantic elements is better!)
- 'role' is great for letting a screen reader know when a non-semantic element has been retrofitted into a semantic
  element's role

contenteditable
- if 'contenteditable' attribute is 'true', element is:
    - editable
    - focusable
    - added to tab order as if 'tabindex="0"'
- 'contenteditable' is an enumerated attribute supporting 'true' and 'false' values
    - default value 'inherit' if attribute not present or has invalid value
- so these are equivalent:
<style contenteditable>
<style contenteditable="">
<style contenteditable="true">
- toggle between states by querying value of the 'HTMLElement.isContentEditable' readonly property
- or by setting 'editor.contentEditable' to 'true', 'false', or 'inherit'
const editor = document.getElementById("myElement");
if(editor.contentEditable) {
  editor.setAttribute("contenteditable", "false");
} else {
  editor.setAttribute("contenteditable", "");
}
- global attributes can be added to all elements, even <style>

Custom attributes
- you can create your own global attributes
    - just need to add 'data-' prefix
        - followed by a lowercase series of letters not starting with 'xml' and not containing ':'
- access their values through DOM using 'dataset[name]' on the element with the custom attribute
- you can use 'getAttribute()' using full attribute name, or simpler way using 'dataset' property:
    - el.dataset[name]; // value of custom attribute data-name in element stored in el
- 'dataset' property returns a 'DOMStringMap' object of each element's 'data-' attributes
    - don't need to know all the custom attributes to access their names and values:
for (let key in el.dataset) {
  customObject[key] = el.dataset[key];
}

- remember that h1 elements get smaller the more elements they're nested in by default browser behavior
A section with a heading that's ~not~ a landmark (not read by screen readers):
<section id="about">
    <h2>What you'll learn</h2>
    <p>...</p>
</section>

A section with a heading that ~is~ a landmark (<h2> read by screen readers):
<section id="about" aria-labelledby="about_heading">
    <h2 id="about_heading">What you'll learn</h2>
    <p>...</p>
</section>

- too many landmarks can be disorienting!

Quotes and citations
- elements: <blockquote>, <q>, and <cite>
    - good practice to use <cite> for actual resources
    - <cite> can be the title of a source
        - whether mentioned in passing or quoted or referenced
        - the content of <cite> is the work, not the author
        - <cite> has no implicit role
        - <cite> should get its accessible name from its contents
            - don't include an 'aria-label'
    - <blockquote> closing tag is ~required~!
        - unlike <p> closing tag, which is best practice but not strictly necessary
- also a 'cite' attribute
    - provides more information for search
    - machine-readable, not shown to user
    - valid on <q> and <blockquote>
    - takes as its value the URL for the source document/message from which quote is derived
- <br> should not be used to separate paragraphs
    - use it just as a line break (in an address, for example)
- adding the 'lang' attribute to <p> elements helps with the accent of screen readers

HTML entities
- since < is used in HTML, escape it using '&lt;' or '&#60;'
- 4 reserved HTML entities: '<', '>', '&', '"'
    - respective character references: '&lt;', '&gt', '&amp;', '&quot;'
- commonly used:
    - '&copy;' for ©
    - '&trade;' for ™
    - '&nbsp;' for non-breaking space
        - useful when including a space between characters while preventing line break from occurring there
- there's an encoded equivalent beginning with '&#' for every character

Links
- <a> can also be used to download files or to send an email, even including subject and email body
- absolute URLs include a protocol (like 'https://')
    - the protocol '//' is an implicit protocol meaning 'same as current protocol'
- relative URLs don't include protocol and are 'relative' to current file
    - example: <a href="../attributes/">Attributes</a>
- href for mail: 'mailto:'
- href for calls: 'tel:'
- populated href for an email link:
<a href="mailto:?subject=Join%20me%21&body=You%20need%20to%20show%20your%20human%20that%20you%20can%27t%20be%20owned%21%20Sign%20up%20for%20Machine%20Learning%20workshop.%20We%20are%20taking%20over%20the%20world.%20http%3A%2F%2Fwww.machinelearning.com%23reg
">Tell a machine</a>
    - '?' separates 'mailto:' and email address (if present) from query term
    - within query, '&' to separate fields, '=' equate field name with value
    - whole thing is percent-encoded
- there are other types of URLs like blobs and data URLs
- on sites with https it's possible to create and run app specific protocols with 'registerProtocolHandler()'
- good to let users know when it's likely links will open in other applications
    - text between opening/closing tags should tell user link type
- CSS attribute selectors can be used to target styles by application type
    - '[href^="mailto:"]', '[href^="tel:"]', and '[href$=".pdf"]'

Downloads
- 'download' attribute should be used when 'href' points to downloadable resource
- value of 'download' attribute is suggested filename for resource
- 'href' is the URL of the asset

Browsing context
- 'target' attribute defines browsing context for link navigation and form submission
- 4 keywords: see descriptions in the <base> section
- any term can be used
- '_blank' opens links in a new tab
    - this does mean a new tab will be opened every time the link is clicked, even if it's already been clicked
    - prevent this with a tab context name
    - instead of '_blank', use something like 'reg' (for 'registration')
    - then every time the link is clicked, the 'reg' tab will be reloaded
    - it will only be created once

- 'rel' attribute defines relationship between linked resource and current document
    - can have multiple space separated values
    - seems like a major function is just semantics
    - often tells the browser 'tips' for when/how to load a resource
        - ex: preloading/fetching content
    - 'nofollow' value tells spiders not to follow the link
    - 'external' value indicates an external URL
    - 'help' keyword indicates a link to context-sensitive help
        - hovering over a link with this 'rel' value shows a help cursor
        - use CSS 'cursor' property to get this cursor if not for a link
    - 'prev' and 'next' values indicate links pointing to prev/next documents in a series
- example usage:
<a href="/fr/" hreflang="fr-FR" rel="alternate" lang="fr-FR">atelier d'apprentissage mechanique</a>
<a href="/pt/" hreflang="pt-BR" rel="alternate" lang="pt-BR">oficina de aprendizado de máquina</a>

Tracking link clicks
- 'ping' attribute
    - includes space-separated link of https URLs to be pinged if link clicked
    - sends 'POST' request with body 'PING' to URLs listed as value of 'ping' attribute

User experience
- differentiate links from other content
- give links context - their destination should be clear
    - being more descriptive than 'click here' or 'more info' helps SEO!
- include focus styles
- content between <a> and </a> is link's default accessible name - should inform purpose/destination
    - 'alt' description used instead if link content is image
- don't nest focusable/clickable elements inside interactive elements, e.g. buttons/labels in links or vice versa

Links and JS
- 'links' property returns an 'HTMLCollection' matching 'a' and 'area' elements that have an 'href' attribute
- example:
let a = document.links[0]; // obtain the first link in the document
a.href = 'newpage.html'; // change the destination URL of the link
a.protocol = 'ftp'; // change just the scheme part of the URL
a.setAttribute('href', 'https://machinelearningworkshop.com/'); // change the attribute content directly