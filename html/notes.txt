2 types of HTML elements:
- Non-replaced: usually have closing tags and dictate how the content between the tags should be marked up
- Replaced and void: usually without a closing tag, the element becomes something else (e.g. image, form UI element,
  etc.)

The function of HTML elements is to describe what the content is - not to style it.

Essentials for every HTML page:
- Type of document
- Human language
- Character set
- Title

Always add <!DOCTYPE html> as a first line - tells the browser to use standards mode (not quirks mode)
Skeleton:
<!DOCTYPE html>
<html lang="en-US">
    <head>
    </head>
    <body>
    </body>
</html>

The head section contains all the metadata for a site. ALWAYS include:
- character set
- title
- viewport settings

Always use UTF-8 encoding (it's the standard required for HTML5)
<meta charset="utf-8" />
- the '/' at the end of the tag is a classic way of indicating that the tag is has no closing tag

Should always use the viewport meta tag.
<meta name="viewport" content="width=device-width" />

Metadata that should be included outside the <meta> tags:
- CSS
    - <link> with 'rel' attribute set to 'stylesheet' (preferred)
    - include the CSS directly within the head within opening and closing <style> tags
    <link rel="stylesheet" href="styles.css">
    - 'type="text/css"' is unnecessary! (unless using something other than css)
    - custom properties can be declared in the <head> <style> block:
    <style>
        :root {
            --theme-color: #226DAA;
        }
    </style>

While styles can go in the body, they're better in the head for performance.

- Favicon
    - the little icon appearing in the browser tab
    - when not declared, browser tries to find 'favicon.ico' in the top-level directory
    - <link> allows you to use a different file name and location:
<link rel="icon" sizes="16x16 32x32 48x48" type="image/png" href="/images/mlwicon.png" />
    - which means use icon specified in scenarios where 16/32/48px makes sense
    - size can be 'any' for scalable icons or a space-separated list of widthXheight values (must be multiples of 16, x
    or X)
    - extras for apple:
<link rel="apple-touch-icon" sizes="180x180" href="/images/mlwicon.png" />
<link rel="mask-icon" href="/images/mlwicon.svg" color="#226DAA" />
    - apple-touch-icon is for iOS devices when a site is added to the home screen
    - you can specify multiple icons with different sizes for different devices
    - mask-icon is used for pinned tabs on macOS Safari - icon should be monochrome SVG colored using 'color' attribute
    - be consistent in icon usage across a website

- Alternate versions
    - used to identify translations or alternate representations of the site
<link rel="alternate" href="https://www.machinelearningworkshop.com/fr/" hreflang="fr-FR" />
<link rel="alternate" href="https://www.machinelearningworkshop.com/pt/" hreflang="pt-BR" />
    - when using 'alternate' for a translation, the 'hreflang' attribute must be set
    - can also define alternate URI for an RSS feed when 'type' is set to 'application/rss+xml' or
    'application/atom+xml'.
<link rel="alternate" type="application/x-pdf" href="https://machinelearningworkshop.com/mlw.pdf" />

- Canonical versions
    - used to identify the authoritative version of a site if there are multiple translations or versions
    - use 'rel="canonical"'
    - include the canonical URL on all translated pages and on the home page
<link rel="canonical" href="https://www.machinelearning.com" />

- Scripts
    - the default is JavaScript, use 'type' attribute if anything else, or 'type="module"' for a JS module
    - the <script> tag can be used to encapsulate code or download external file
    - ensure elements exist before the script referencing them is encountered! for this reason, it may make sense to
    include <script> at the bottom of the <body> rather than in the <head>
    - JS is render-blocking, meaning if it can't be run, the rest of the website won't load
    - reduce the blocking nature of JS download and execution using the attributes 'defer' and 'async'
    - 'defer' means rendering not blocked during download and JS executed after rest of document rendered
    - 'async' is the same, except rendering is paused while JS executes
    - example: <script src="js/switch.js" defer></script>
    - 'async' and 'defer' only valid on external scripts

- Base
    - <base> allows setting default URL and target, with 'href' attribute defining base URL for all relative links
    - 'target' attribute sets where the links should open
        - default '_self' opens files in same context as current document
        - '_blank' opens every link in a new window
        - '_parent' of current content (maybe same as self if opener not an iframe)
        - '_top' opens in same browser tab, but popped out of current context to take entire tab
    - usually devs add 'target' attribute to the few links they want to open in a new window on the links themselves
    - drawback: anchor links are resolved with <base>
        - <a href="#ref"> effectively converted to <a target="_top" href="https://machinelearningworkshop.com#ref">
    - can only be one <base> element in a document
    - should come before any relative URLs are used, including script and stylesheet references

HTML comments is anything between <!-- and -->
Use JS or CSS comments in script or style blocks, as necessary

Meta tags
2 main types: pragma directives and named meta types
- both must include 'content' attribute defining content for the type of metadata listed

Pragma directives
- most common is the 'refresh' directive
<meta http-equiv="refresh" content="60; https://machinelearningworkshop.com/regTimeout" />
- refreshes every 60 seconds but DON'T use it! because why would you???? terrible for users and especially accessibility
- good practice is to make sure user has enough time to read page, a link to hasten the process, and maybe can cancel

- most useful pragma directive: 'content-security-policy'
- content policies specify allowed server origins and script endpoints, helping against cross-site scripting attacks
<meta http-equiv="content-security-policy" content="default-src https:" />

Named meta tags
- include 'name' attribute for name of metadata
- also requires 'content' attribute
- probably want to include 'description' and 'theme-color' but not 'keywords'

- 'description' value is super important for SEO, often what's displayed under page title in search results, often
  default description of bookmarked pages

- you can tell search engines not to index your site using the 'robots' named meta tag:
<meta name="robots" content="noindex, nofollow" />
- should work, but no law requires bots to listen
- don't need anything to specifically allow indexing

- 'theme-color' defines a color to customize the browser interface
- especially useful for progressive web apps
    - can be included in the required manifest file of PWAs instead, but defining in HTML might be faster
- example: (sets theme color to blue)
<meta name="theme-color" content="#226DAA" />
- can include 'media' attribute enabling setting of different theme colors based on media queries
- this is the only meta tag where you might have more than one of the same (for different media queries)

- if including multiple named metas for legacy browsers, legacy should come after newer values

Open Graph: allows you to control how social media sites display links to your content
- can customize an image and site title and description for social media sites
- Open Graph meta tags have two attributes each:
    - 'property' attribute' instead of 'name' and the 'content' for that property
- example:
<meta property="og:title" content="Machine Learning Workshop" />
<meta property="og:description" content="School for Machines Who Can't Learn Good and Want to Do Other Stuff Good Too" />
<meta property="og:image" content="http://www.machinelearningworkshop.com/image/all.png" />
<meta property="og:image:alt" content="Black and white line drawing of refrigerator, french door refrigerator, range, washer, fan, microwave, vaccuum, space heater and air conditioner" />
- the image URL needs to be an absolute URL
- can provide a canonical URL with 'og:url'
- different sites might have their own similar syntax: (not necessarily following Open Graph protocol)
- example for Twitter:
<meta name="twitter:title" content="Machine Learning Workshop" />
<meta name="twitter:description" content="School for machines who can't learn good and want to do other stuff good too" />
<meta name="twitter:url" content="https://www.machinelearningworkshop.com/?src=twitter" />
<meta name="twitter:image:src" content="http://www.machinelearningworkshop.com/image/all.png" />
<meta name="twitter:image:alt" content="27 different home appliances" />
<meta name="twitter:creator" content="@estellevw" />
<meta name="twitter:site" content="@perfmattersconf" />
- can provide different values for 'og:image', 'og:title', and 'og:description' based on the parameter of the URL

Customize application icons if site is added as a bookmark, added to a home screen, etc.:
<link rel="apple-touch-startup-image" href="icons/ios-portrait.png" media="orientation: portrait" />
<link rel="apple-touch-startup-image" href="icons/ios-landscape.png" media="orientation: landscape" />

You can use meta tags to tell the browser that a site is web-app capable (can stand on its own without UI like a back
button)
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="mobile-web-app-capable" content="yes" />

You can customize the name of your site's app icon if it's saved to a home screen:
<meta name="apple-mobile-web-app-title" content="MLW" />
<meta name="application-name" content="MLW" />
- these two tags could be replaced by 'short_name: MLW' in a webmanifest file
- a manifest file can prevent an unwieldy header full of <link> and <meta> tags
- manifest files are usually called 'manifest.webmanifest' or 'manifest.json'
- then use '<link>' tag:
<link rel="manifest" href="/mlw.webmanifest" />

Semantic HTML
There's a big difference between using only <div> and <span> versus descriptive <header>, <footer>, <main>, and <nav>
tags. The latter is significantly better for accessibility.
You can also use the 'role' attribute to make non-semantic tags semantic, with roles like 'banner', 'heading', and
'navigation'. However, the implicit role (e.g. in tags like <header>) is preferable.
Role is better than using multiple 'id' or 'class' attributes for <div> tags.
The goal is building a meaningful accessibility object model (AOM) for screen readers and other assistive technology to
use.

Ultimately, using semantic HTML results in writing less code.

Good semantic HTML tags:
- <header>
- <footer>
- <nav>
- <main>: only 1 per page
- <aside>: content related to main content, often a sidebar or call-out box, implicit 'role' is 'complementary'
- <article>: posts/sections nested in main - self-contained and independently reusable content
- <section>
- <address>: contact info for individuals or organizations
- <h1>-<h6>: headings, nest headings without skipping levels, they appear smaller in nested sections